<?php

/**
 * @file
 * Contains ddhi_ingest.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;


DEFINE('DDHI_INGEST_LOCKFILE','ddhi_ingest.lock');
DEFINE('DDHI_DATA_RECORDS_DEST','ddhi_ingest/records.xml');
DEFINE('DDHI_AUDIO_MANIFEST_DEST','ddhi_ingest/audio_manifest.csv');
DEFINE('DDHI_TEI_MANIFEST_DEST','ddhi_ingest/tei_manifest.csv');

/**
 * Implements hook_help().
 */
function ddhi_ingest_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ddhi_ingest module.
    case 'help.page.ddhi_ingest':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Migrates data from Level 1 Encoded DDHI TEI data.') . '</p>';
      return $output;

    default:
  }
}

/**
 * @function
 * Prepares intermediary files for import. 
 * Process creates a lockfile to prevent rebuilding files on subsequent calls.
 * 
 * Important: $cleanup must be set to TRUE during the final import procedure
 * to allow new migrations to use refreshed data.
 *
 * @todo: Reimagine this as a proper Drupal service.
 */

function ddhi_ingest_prepare_data_records($source,$cleanup=false) {
  $file_scheme_root = \Drupal::service('file_system')->realpath(file_default_scheme() . "://");
  
  // Return null if files are already built.
  
  if (file_exists($file_scheme_root . "/" . DDHI_INGEST_LOCKFILE)) {
    if ($cleanup) {
      ddhi_ingest_remove_lockfile();
    }
    
    return;
  }
  
  $outFilePath =  $file_scheme_root . '/' . DDHI_DATA_RECORDS_DEST;
      
  // @todo: Drupalize this concatenation function. Consider using a managed file approach.
  
  //Set source directory and output file location
  
  $dirPath = DRUPAL_ROOT . "/" . $source;
  
  // Create directories if necessary
  
  $pathArray = explode('/',DDHI_DATA_RECORDS_DEST);
  
  if (count($pathArray) > 1) {
    $dirpath = $file_scheme_root;
    array_pop($pathArray); // Remove the filename, leaving only directories
    foreach ($pathArray as $dir) {
      $dirpath .= "/{$dir}";
      if (!is_dir($dirpath)) {
        mkdir($dirpath, 0755, true);
      }
    }
  }
  
  // Prepare outfile for writing. 
  
  $outFile = fopen($outFilePath, "w+");
  
  // Add a doctype declaration 
  
  fwrite($outFile,'<?xml-model type="application/relax-ng-compact-syntax"?>' . "\n");
  fwrite($outFile,"<DDHIMessage>\n");
      
  //Then cycle through the files reading and writing.

  foreach(scandir($dirPath) as $file){
    
      // Skip non XML files. @todo this will become a more sophisticated file integrity validator
              
      if (stripos($file, '.xml') == false) {
        continue;
      }
    
          
      $teiFilePath = $dirPath . "/" . $file;
      $inFile = fopen($teiFilePath, "r");
                      
      //Package the TEI. This will be replaced with values from the File Specification.
      
      fwrite($outFile,"<DDHIPackage>\n");
      fwrite($outFile,"<DDHIPackageHeader>\n");
      fwrite($outFile,"  <head>v001</head>\n");
      fwrite($outFile,"  <id>{$file}</id>\n"); // Use filename for now
      fwrite($outFile,"  <message></message>\n");
      fwrite($outFile,"  <TEIFilePath>{$teiFilePath}</TEIFilePath>\n");
      fwrite($outFile,"</DDHIPackageHeader>\n");
      
      // Copy lines
      
      while ($line = fgets($inFile)){
        // Filter out XML declaration
        if (!preg_match('/^<\?xml.+?>.*\n$/',$line)) {
          
          /** Strips namespace (and all attributes) from TEI tag.
            * See note in ddhi_ingest_level_1.yml file about namespaces. */
          
          if (preg_match('/<TEI.+?>/',$line)) {
            fwrite($outFile,"<TEI>\n"); //non-namespaced TEI tag
          } else {
            fwrite($outFile, $line); // append line
          }
        }
      }
      
      fclose($inFile);
      
      fwrite($outFile,"</DDHIPackage>\n");
  }
  
  fwrite($outFile,'</DDHIMessage>');

  //Then clean up
  fclose($outFile);
}

function ddhi_ingest_set_lockfile() {
  $file_scheme_root = \Drupal::service('file_system')->realpath(file_default_scheme() . "://");
  $lockfile = fopen($file_scheme_root . "/" . DDHI_INGEST_LOCKFILE, "w");  

}

function ddhi_ingest_remove_lockfile() {
  $file_scheme_root = \Drupal::service('file_system')->realpath(file_default_scheme() . "://");
  if (file_exists($file_scheme_root . "/" . DDHI_INGEST_LOCKFILE)) {
    unlink($file_scheme_root . "/" . DDHI_INGEST_LOCKFILE);
  }  
}
